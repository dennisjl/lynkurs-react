{"version":3,"sources":["Reddit.js","Bikes.js","App.js","serviceWorker.js","index.js"],"names":["Reddit","useState","joke","setJoke","useEffect","fetch","then","response","json","data","children","catch","err","console","error","log","className","title","selftext","service","createEnturService","clientName","Bikes","bikeStations","setBikeStations","getBikeRentalStationsByPosition","latitude","longitude","map","stationData","key","id","station","Station","props","name","bikeAvailable","spacesAvailable","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"wPAgDeA,EA1CA,WAAO,IAAD,EACOC,mBAAS,IADhB,mBACVC,EADU,KACJC,EADI,KAgCjB,OATAC,qBAAU,WAdNC,MAZO,yDAaNC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAE5BF,MAAK,SAACE,GAAD,OAASL,EAAQK,EAAKC,KAAKC,SAAS,GAAGD,SAC5CE,OAAM,SAACC,GAAD,OAAQC,QAAQC,MAAMF,QAY9B,IAEHC,QAAQE,IAAIb,GAKLA,EACH,yBAAKc,UAAU,UAAf,SACI,2BAAId,EAAKe,OACT,2BAAIf,EAAKgB,WAGb,sC,QCxCFC,E,MAAUC,GAAmB,CAAEC,WAAY,qBA4BlCC,EA1BD,WAAO,IAAD,EACwBrB,mBAAS,IADjC,mBACTsB,EADS,KACKC,EADL,KAgBhB,OAZApB,qBAAU,WAGNe,EAAQM,gCACJ,CAACC,SAAU,UAAWC,UAAW,WACjC,KAEHrB,MAAK,SAACG,GAAD,OAASe,EAAgBf,QAChC,IAGHI,QAAQE,IAAIQ,GAER,yBAAKP,UAAU,gBAAf,SACI,wCACCO,EAAaK,KAAI,SAAAC,GAAW,OACzB,kBAAC,EAAD,CAASC,IAAKD,EAAYE,GAAIC,QAASH,SAUjDI,EAAU,SAACC,GAAW,IACjBF,EAAYE,EAAZF,QAEP,OADAnB,QAAQE,IAAIiB,GACL,yBAAKhB,UAAU,WAAWgB,EAAQG,KAAlC,MAA2CH,EAAQI,cAAnD,MAAqEJ,EAAQK,kBCxBzEC,MAVf,WACE,OACE,yBAAKtB,UAAU,OACb,0CACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEcuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7C,MAAK,SAAA8C,GACJA,EAAaC,gBAEd1C,OAAM,SAAAG,GACLD,QAAQC,MAAMA,EAAMwC,c","file":"static/js/main.4c867c18.chunk.js","sourcesContent":["import React, {useState, useEffect} from \"react\"\n//bruker hooks useState og useEffect\n\nconst APIUrl = \"https://www.reddit.com/r/jokes/top.json?t=day&limit=1\"\n\n\nconst Reddit = () => {\n    const [joke, setJoke] = useState({});\n\n    //constant som utfører apikall:\n    //gir tilbake et promise\n    //response er svaret fra fetch, og i dette tilfellet konverterer denne til json\n    //det som er viktig med å bruke .then-funksjon er å vente til forrige rekker å gjøre alt den skal\n    // før neste kalles.\n    const getJoke = () =>{\n        fetch(APIUrl)\n        .then((response) => response.json())\n        //.then((json)=> console.log(json))\n        .then((json)=> setJoke(json.data.children[0].data))\n        .catch((err) =>console.error(err));\n    };\n    \n    ////gjør call til reddit kontinuerlig\n    //getJoke()\n\n\n    //gir hooken anonym funksjon og getjoke\n    //hvis det som endrer seg i [] endrer seg, så vil det kalles på nytt.\n    //useeffect kjører uavh av rendermetoden.\n    useEffect(() => {\n        getJoke();\n    }, []);\n\n    console.log(joke);\n\n    //javascript kode inne i html kode når du bruker klammeparanterser\n    \n     \n    return joke ? ( //iternary ifstatement i js. hvis true, så returneres denne, else returnerer den tomme diven under\n        <div className=\"reddit\">Reddit\n            <p>{joke.title}</p>\n            <p>{joke.selftext}</p>\n        </div>\n    ) : (\n        <></> // else returner denne tomme diven\n    );\n};\n\nexport default Reddit;\n","//skal gjre kall til bysykkel og få tilbake liste med stasjoner og posisjonen og sykkeler tilgjengelig fra sdk.entur.org\nimport React, {useState, useEffect} from \"react\";\nimport createEnturService from '@entur/sdk';\n\nconst service = createEnturService({ clientName: 'dennisjl-miniapp' });\n\nconst Bikes = () => {\n    const [bikeStations, setBikeStations] = useState([]); //gir en tomliste, siden vi vet vi får tilbake en liste\n\n\n    useEffect(() => {\n        //console.log(\"Heipådeg\")\n        //metoden tar inn koordinat og threshhold, og returnerer et promise\n        service.getBikeRentalStationsByPosition(\n            {latitude: 63.428311, longitude: 10.392514},\n            230\n        )\n        .then((data) =>setBikeStations(data));\n    }, []);         //setter som regel komme, tom liste som minimum s.a. slipper å laste hele tiden\n\n\n    console.log(bikeStations)\n    return (\n        <div className=\"BikeStations\"> Bikes\n            <h3>Bysykkel</h3>\n            {bikeStations.map(stationData => (\n                <Station key={stationData.id} station={stationData}/>\n            ))}\n        </div>\n    );\n};\n\nexport default Bikes;\n\n\n//denne blir ikke eksportert så den er bare tilgjengelig herfra.\nconst Station = (props) => {\n    const{ station } = props;\n    console.log(station)\n    return <div className=\"station\">{station.name} - {station.bikeAvailable} : {station.spacesAvailable} \n    </div>\n}","import React from 'react';\nimport './App.css';\nimport Reddit from './Reddit';\nimport Bikes from './Bikes';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Infoskjerm</h1>\n      <Reddit/>\n      <Bikes/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}